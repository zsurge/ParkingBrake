C51 COMPILER V9.59.0.0   EEPROM                                                            11/19/2019 17:35:36 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN ..\HEX\EEPROM.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\SCR\EEPROM.c OPTIMIZE(9,SPEED) BROWSE INCDIR(..\INC) DEBUG OBJECTEXTE
                    -ND PRINT(.\EEPROM.lst) OBJECT(..\HEX\EEPROM.obj)

line level    source

   1          
   2          //      本程序是STC系列的内置EEPROM读写程序。
   3          
   4          
   5          #include "eeprom.h"
   6          
   7          
   8          //========================================================================
   9          // 函数: void   ISP_Disable(void)
  10          // 描述: 禁止访问ISP/IAP.
  11          // 参数: non.
  12          // 返回: non.
  13          // 版本: V1.0, 2012-10-22
  14          //========================================================================
  15          void    DisableEEPROM ( void )
  16          {
  17   1              IAP_CONTR = 0;                  //禁止ISP/IAP操作
  18   1              IAP_CMD   = 0;                  //去除ISP/IAP命令
  19   1              IAP_TRIG  = 0;                  //防止ISP/IAP命令误触发
  20   1              IAP_ADDRH = 0x80;               //清0地址高字节
  21   1              IAP_ADDRL = 0;                  //清0地址低字节，指向非EEPROM区，防止误操作
  22   1      }
  23          
  24          //========================================================================
  25          // 函数: void EEPROM_read_n(u16 EE_address,u8 *DataAddress,u16 number)
  26          // 描述: 从指定EEPROM首地址读出n个字节放指定的缓冲.
  27          // 参数: EE_address:  读出EEPROM的首地址.
  28          //       DataAddress: 读出数据放缓冲的首地址.
  29          //       number:      读出的字节长度.
  30          // 返回: non.
  31          // 版本: V1.0, 2012-10-22
  32          //========================================================================
  33          
  34          void EEPROM_read_n ( u16 EE_address,u8* DataAddress,u16 number )
  35          {
  36   1      //      EA = 0;         //禁止中断
  37   1      
  38   1              do
  39   1              {
  40   2                      IAP_CONTR = ENABLE_IAP;                                         //设置等待时间，允许ISP/IAP操作，送一次就够
  41   2                      IAP_CMD = CMD_READ;
  42   2                      IAP_ADDRH = EE_address / 256;           //送地址高字节（地址需要改变时才需重新送地址）
  43   2                      IAP_ADDRL = EE_address % 256;           //送地址低字节
  44   2                      IAP_TRIG=0X46;
  45   2                      IAP_TRIG=0XB9;
  46   2                      _nop_();
  47   2      
  48   2                      *DataAddress = IAP_DATA;                        //读出的数据送往
  49   2                      EE_address++;
  50   2                      DataAddress++;
  51   2                      DisableEEPROM();
  52   2              }
  53   1              while ( --number );
  54   1      
C51 COMPILER V9.59.0.0   EEPROM                                                            11/19/2019 17:35:36 PAGE 2   

  55   1      
  56   1      //      EA = 1;         //重新允许中断
  57   1      }
  58          
  59          
  60          /******************** 扇区擦除函数 *****************/
  61          //========================================================================
  62          // 函数: void EEPROM_SectorErase(u16 EE_address)
  63          // 描述: 把指定地址的EEPROM扇区擦除.
  64          // 参数: EE_address:  要擦除的扇区EEPROM的地址.
  65          // 返回: non.
  66          // 版本: V1.0, 2013-5-10
  67          //========================================================================
  68          void EEPROM_SectorErase ( u16 EE_address )
  69          {
  70   1      //      EA = 0;         //禁止中断
  71   1              IAP_CONTR = ENABLE_IAP;
  72   1              IAP_CMD = CMD_ERASE;
  73   1              IAP_ADDRH = EE_address / 256;                   //送扇区地址高字节（地址需要改变时才需重新送地址）
  74   1              IAP_ADDRL = EE_address % 256;                   //送扇区地址低字节
  75   1              IAP_TRIG=0X46;
  76   1              IAP_TRIG=0XB9;
  77   1              _nop_();
  78   1              DisableEEPROM();
  79   1      //      EA = 1;         //重新允许中断
  80   1      }
  81          
  82          //========================================================================
  83          // 函数: void EEPROM_write_n(u16 EE_address,u8 *DataAddress,u16 number)
  84          // 描述: 把缓冲的n个字节写入指定首地址的EEPROM.
  85          // 参数: EE_address:  写入EEPROM的首地址.
  86          //       DataAddress: 写入源数据的缓冲的首地址.
  87          //       number:      写入的字节长度.
  88          // 返回: non.
  89          // 版本: V1.0, 2012-10-22
  90          //========================================================================
  91          void EEPROM_write_n ( u16 EE_address,u8* DataAddress,u16 number )
  92          {
  93   1      //      EA = 0;         //禁止中断
  94   1      
  95   1      
  96   1      
  97   1              do
  98   1              {
  99   2                      IAP_CONTR = ENABLE_IAP;
 100   2                      IAP_CMD = CMD_PROGRAM;
 101   2                      IAP_ADDRH = EE_address / 256;           //送地址高字节（地址需要改变时才需重新送地址）
 102   2                      IAP_ADDRL = EE_address % 256;           //送地址低字节
 103   2                      IAP_DATA  = *DataAddress;                       //送数据到ISP_DATA，只有数据改变时才需重新送
 104   2      
 105   2                      IAP_TRIG=0X46;
 106   2                      IAP_TRIG=0XB9;
 107   2                      _nop_();
 108   2                      EE_address++;
 109   2                      DataAddress++;
 110   2                      DisableEEPROM();
 111   2              }
 112   1              while ( --number );
 113   1      
 114   1      
 115   1      //      EA = 1;         //重新允许中断
 116   1      }
C51 COMPILER V9.59.0.0   EEPROM                                                            11/19/2019 17:35:36 PAGE 3   

 117          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    138    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      14
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
