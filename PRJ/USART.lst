C51 COMPILER V9.01   USART                                                                 03/01/2019 15:37:16 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE USART
OBJECT MODULE PLACED IN ..\HEX\USART.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\SCR\USART.C BROWSE INCDIR(..\INC) DEBUG OBJECTEXTEND PRINT(.\USART.lst) 
                    -OBJECT(..\HEX\USART.obj)

line level    source

   1          
   2          #include "USART.h"
   3          
   4          
   5          
   6          COMx_Define     COM1;
   7          u8      xdata TX1_Buffer[COM_TX1_Lenth];        //发送缓冲
   8          u8      xdata RX1_Buffer[COM_RX1_Lenth];        //接收缓冲
   9          
  10          
  11          
  12          
  13          /********************* UART1中断函数************************/
  14          void UART1_int (void) interrupt 4
  15          {
  16   1              if(RI)
  17   1              {
  18   2                      RI = 0;
  19   2                      if(!COM1.RX_busy)
  20   2                              {
  21   3                                      if(COM1.RX_Cnt >= COM_RX1_Lenth)        
  22   3                                              { 
  23   4                                                      COM1.RX_Cnt = 0; 
  24   4                                                      memset(RX1_Buffer,0x00,sizeof(RX1_Buffer));
  25   4                                                      return;
  26   4                                              }
  27   3                                      RX1_Buffer[COM1.RX_Cnt] = SBUF;
  28   3                                      COM1.RX_Cnt++;
  29   3                                      COM1.RX_TimeOut = TimeOutSet1;  
  30   3                              }
  31   2              }
  32   1      
  33   1              if(TI)
  34   1              {
  35   2                      TI = 0;
  36   2                      DE= COM_SEND;
  37   2                      if(COM1.TX_read != COM1.TX_write)
  38   2                      {
  39   3                              SBUF = TX1_Buffer[COM1.TX_read];
  40   3                              if(++COM1.TX_read >= COM_TX1_Lenth)             COM1.TX_read = 0;
  41   3                      }
  42   2                      else    
  43   2                      { COM1.B_TX_busy = 0; COM1.TX_read = 0; COM1.TX_write=0; DE= COM_RECE; memset(TX1_Buffer,0,sizeof(TX1_Bu
             -ffer));}
  44   2              }
  45   1      }
  46          
  47          
  48          /*************** 装载串口发送缓冲 *******************************/
  49          
  50          void TX1_writebuff(u8 dat)      //写入发送缓冲，指针+1
  51          {
  52   1              TX1_Buffer[COM1.TX_write] = dat;        //装发送缓冲
  53   1              if(++COM1.TX_write >= COM_TX1_Lenth)    COM1.TX_write = 0;
C51 COMPILER V9.01   USART                                                                 03/01/2019 15:37:16 PAGE 2   

  54   1              if(COM1.B_TX_busy == 0)         //空闲
  55   1              {
  56   2                      COM1.B_TX_busy = 1;             //标志忙
  57   2                      TI = 1;                                 //触发发送中断
  58   2              }
  59   1      }
  60          
  61          
  62          void PrintString(u8 *puts)
  63          {
  64   1          for (; *puts != 0;  puts++)  TX1_writebuff(*puts);  //遇到停止符0结束
  65   1      }
  66          
  67          
  68          void intUsart()
  69          {
  70   1              memset(&COM1, 0, sizeof(COM1));
  71   1              memset(&TX1_Buffer, 0, sizeof(TX1_Buffer));
  72   1              memset(&RX1_Buffer, 0, sizeof(RX1_Buffer));
  73   1              DE= COM_RECE;
  74   1      }
  75          
  76          //speakTask:操作命令
  77          //num:操作数
  78          void speak(u8 speakTask,u8 num)
  79          {
  80   1              u8 xdata sen_buff[COM_TX1_Lenth];
  81   1              memset(sen_buff,0,sizeof(sen_buff));
  82   1              switch(speakTask)
  83   1                      {
  84   2                              case 1:
  85   2                                      break;
  86   2      
  87   2      
  88   2                              case VICE_STA:
  89   2                                      sen_buff[0]=num;
  90   2                                      sen_buff[1]=num;
  91   2                                      sen_buff[2]=num;
  92   2                                      break;
  93   2      
  94   2                              case 3:
  95   2                                      sen_buff[0]=0x30+StmNum2/100%10;
  96   2                                      sen_buff[1]=0x30+StmNum2/10%10;
  97   2                                      sen_buff[2]=0x30+StmNum2%10;
  98   2                                      sen_buff[3]=0x3b;
  99   2                                      sen_buff[4]=0x0a;
 100   2                                      break;
 101   2                                      
 102   2                              case 2:
 103   2      //                              sen_buff[0]=0x30+test_dly/10000%10;
 104   2      //                              sen_buff[1]=0x30+test_dly/1000%10;
 105   2      //                              sen_buff[2]=0x30+test_dly/100%10;
 106   2      //                              sen_buff[3]=0x30+test_dly/10%10;
 107   2      //                              sen_buff[4]=0x30+test_dly%10;
 108   2      //                              sen_buff[5]=0x3b;
 109   2      //                              sen_buff[6]=0x0a;
 110   2      
 111   2      //                              sen_buff[0]=0x30+err/100%10;
 112   2      //                              sen_buff[1]=0x30+err/10%10;
 113   2      //                              sen_buff[2]=0x30+err%10;
 114   2      //                              sen_buff[3]=0x30+mTask/100%10;
 115   2      //                              sen_buff[4]=0x30+mTask/10%10;
C51 COMPILER V9.01   USART                                                                 03/01/2019 15:37:16 PAGE 3   

 116   2      //                              sen_buff[5]=0x30+mTask%10;
 117   2      //                              sen_buff[6]=0x3b;
 118   2      //                              sen_buff[7]=0x0a;
 119   2      
 120   2      //                              sen_buff[0]=0x30+mTask/10%10;
 121   2      //                              sen_buff[1]=0x30+mTask%10;
 122   2      //                              sen_buff[2]=0x30+iTask/10%10;
 123   2      //                              sen_buff[3]=0x30+iTask%10;
 124   2      //                              sen_buff[4]=0x30+Even/10%10;
 125   2      //                              sen_buff[5]=0x30+Even%10;
 126   2      //                              sen_buff[6]=0x30+mPosD/10%10;
 127   2      //                              sen_buff[7]=0x30+mPosD%10;
 128   2      //                              sen_buff[8]=0x3b;
 129   2      //                              sen_buff[9]=0x0a;
 130   2                                      
 131   2      //                              sen_buff[0]=0x30+HupSta/100%10;
 132   2      //                              sen_buff[1]=0x30+HupSta/10%10;
 133   2      //                              sen_buff[2]=0x30+HupSta%10;
 134   2      //                              sen_buff[3]=0x30+HDwSta/100%10;
 135   2      //                              sen_buff[4]=0x30+HDwSta/10%10;
 136   2      //                              sen_buff[5]=0x30+HDwSta%10;
 137   2      //                              sen_buff[6]=0x3b;
 138   2      //                              sen_buff[7]=0x0a;
 139   2      
 140   2      //                              sen_buff[0]=0x30+mRunNum/100%10;
 141   2      //                              sen_buff[1]=0x30+mRunNum/10%10;
 142   2      //                              sen_buff[2]=0x30+mRunNum%10;
 143   2      //                              sen_buff[3]=0x30+mRunTe/100%10;
 144   2      //                              sen_buff[4]=0x30+mRunTe/10%10;
 145   2      //                              sen_buff[5]=0x30+mRunTe%10;
 146   2      //                              sen_buff[6]=0x3b;
 147   2      //                              sen_buff[7]=0x0a;
 148   2      
 149   2      //                              sen_buff[0]=0x30+FzSta/10%10;
 150   2      //                              sen_buff[1]=0x30+FzSta%10;
 151   2      //                              sen_buff[2]=0x30+DgSta/10%10;
 152   2      //                              sen_buff[3]=0x30+DgSta%10;
 153   2      //                              sen_buff[4]=0x30+PosRal/10%10;
 154   2      //                              sen_buff[5]=0x30+PosRal%10;
 155   2      //                              sen_buff[6]=0x3b;
 156   2      //                              sen_buff[7]=0x0a;
 157   2      
 158   2      //                              sen_buff[0]=0x30+mType/100%10;
 159   2      //                              sen_buff[1]=0x30+mType/10%10;
 160   2      //                              sen_buff[2]=0x30+mType%10;
 161   2      //                              sen_buff[3]=0x30+SpeRinN/100%10;
 162   2      //                              sen_buff[4]=0x30+SpeRinN/10%10;
 163   2      //                              sen_buff[5]=0x30+SpeRinN%10;
 164   2      //                              sen_buff[6]=0x3b;
 165   2      //                              sen_buff[7]=0x0a;
 166   2      
 167   2      //                              sen_buff[0]=0x30+err/100%10;
 168   2      //                              sen_buff[1]=0x30+err/10%10;
 169   2      //                              sen_buff[2]=0x30+err%10;
 170   2      //                              sen_buff[3]=0x30+mType/100%10;
 171   2      //                              sen_buff[4]=0x30+mType/10%10;
 172   2      //                              sen_buff[5]=0x30+mType%10;
 173   2      //                              sen_buff[6]=0x3b;
 174   2      //                              sen_buff[7]=0x0a;
 175   2      
 176   2      //                              sen_buff[0]=0x30+DgSta/100%10;
 177   2      //                              sen_buff[1]=0x30+DgSta/10%10;
C51 COMPILER V9.01   USART                                                                 03/01/2019 15:37:16 PAGE 4   

 178   2      //                              sen_buff[2]=0x30+DgSta%10;
 179   2      //                              sen_buff[3]=0x30+Even/100%10;
 180   2      //                              sen_buff[4]=0x30+Even/10%10;
 181   2      //                              sen_buff[5]=0x30+Even%10;
 182   2      //                              sen_buff[6]=0x3b;
 183   2      //                              sen_buff[7]=0x0a;
 184   2      
 185   2      //                              sen_buff[0]=0x30+mTask/100%10;
 186   2      //                              sen_buff[1]=0x30+mTask/10%10;
 187   2      //                              sen_buff[2]=0x30+mTask%10;
 188   2      //                              sen_buff[3]=0x30+Even/100%10;
 189   2      //                              sen_buff[4]=0x30+Even/10%10;
 190   2      //                              sen_buff[5]=0x30+Even%10;
 191   2      //                              sen_buff[6]=0x30+iTask/100%10;
 192   2      //                              sen_buff[7]=0x30+iTask/10%10;
 193   2      //                              sen_buff[8]=0x30+iTask%10;
 194   2      //                              sen_buff[9]=0x30+iTask2/10%10;
 195   2      //                              sen_buff[10]=0x30+iTask2%10;
 196   2      //                              sen_buff[11]=0x30+mPosD/10%10;
 197   2      //                              sen_buff[12]=0x30+mPosD%10;
 198   2      //                              sen_buff[13]=0x3b;
 199   2      //                              sen_buff[14]=0x0a;
 200   2      
 201   2      //                              sen_buff[0]=0x30+mType/100%10;
 202   2      //                              sen_buff[1]=0x30+mType/10%10;
 203   2      //                              sen_buff[2]=0x30+mType%10;
 204   2      //                              sen_buff[3]=0x30+mRunTe/100%10;
 205   2      //                              sen_buff[4]=0x30+mRunTe/10%10;
 206   2      //                              sen_buff[5]=0x30+mRunTe%10;
 207   2      //                              sen_buff[6]=0x30+StmSp/100%10;
 208   2      //                              sen_buff[7]=0x30+StmSp/10%10;
 209   2      //                              sen_buff[8]=0x30+StmSp%10;
 210   2      //                              sen_buff[9]=0x30+DwSlo/100%10;
 211   2      //                              sen_buff[10]=0x30+DwSlo/10%10;
 212   2      //                              sen_buff[11]=0x30+DwSlo%10;
 213   2      //                              sen_buff[12]=0x30+DwSloBri/100%10;
 214   2      //                              sen_buff[13]=0x30+DwSloBri/10%10;
 215   2      //                              sen_buff[14]=0x30+DwSloBri%10;
 216   2      //                              sen_buff[15]=0x3b;
 217   2      //                              sen_buff[16]=0x0a;
 218   2      
 219   2      //                              sen_buff[0]=0x30+aLine%10;
 220   2      //                              sen_buff[1]=0x30+hafTest/10%10;
 221   2      //                              sen_buff[2]=0x30+hafTest%10;
 222   2      //                              sen_buff[3]=0x30+AtNum/100%10;
 223   2      //                              sen_buff[4]=0x30+AtNum/10%10;
 224   2      //                              sen_buff[5]=0x30+AtNum%10;
 225   2      //                              sen_buff[6]=0x30+iTask/100%10;
 226   2      //                              sen_buff[7]=0x30+iTask/10%10;
 227   2      //                              sen_buff[8]=0x30+iTask%10;
 228   2      //                              sen_buff[9]=0x3b;
 229   2      //                              sen_buff[10]=0x0a;
 230   2      
 231   2      //                              sen_buff[0]=0x30+StmNum2/100%10;
 232   2      //                              sen_buff[1]=0x30+StmNum2/10%10;
 233   2      //                              sen_buff[2]=0x30+StmNum2%10;
 234   2      //                              sen_buff[3]=0x3b;
 235   2      //                              sen_buff[4]=0x0a;
 236   2      
 237   2      //                              sen_buff[0]=0x30+ViceRal/10%10;
 238   2      //                              sen_buff[1]=0x30+ViceRal%10;
 239   2      //                              sen_buff[2]=0x3b;
C51 COMPILER V9.01   USART                                                                 03/01/2019 15:37:16 PAGE 5   

 240   2      //                              sen_buff[3]=0x0a;
 241   2      
 242   2      
 243   2                                      sen_buff[0]=0x30+StmSp/100%10;
 244   2                                      sen_buff[1]=0x30+StmSp/10%10;
 245   2                                      sen_buff[2]=0x30+StmSp%10;
 246   2                                      sen_buff[3]=0x30+StmSp2/100%10;
 247   2                                      sen_buff[4]=0x30+StmSp2/10%10;
 248   2                                      sen_buff[5]=0x30+StmSp2%10;
 249   2                                      sen_buff[6]=0x30+StmSlow/100%10;
 250   2                                      sen_buff[7]=0x30+StmSlow/10%10;
 251   2                                      sen_buff[8]=0x30+StmSlow%10;
 252   2                                      sen_buff[9]=0x30+StmSlow2/100%10;
 253   2                                      sen_buff[10]=0x30+StmSlow2/10%10;
 254   2                                      sen_buff[11]=0x30+StmSlow2%10;
 255   2                                      sen_buff[12]=0x3b;
 256   2                                      sen_buff[13]=0x0a;
 257   2      
 258   2      //                              sen_buff[0]=0x30+StmSp/1000%10;
 259   2      //                              sen_buff[1]=0x30+StmSp/100%10;
 260   2      //                              sen_buff[2]=0x30+StmSp/10%10;
 261   2      //                              sen_buff[3]=0x30+StmSp%10;
 262   2      //                              sen_buff[4]=0x30+StmSlow/1000%10;
 263   2      //                              sen_buff[5]=0x30+StmSlow/100%10;
 264   2      //                              sen_buff[6]=0x30+StmSlow/10%10;
 265   2      //                              sen_buff[7]=0x30+StmSlow%10;
 266   2      //                              sen_buff[8]=0x3b;
 267   2      //                              sen_buff[9]=0x0a;
 268   2      
 269   2      
 270   2      //                              sen_buff[0]=0x30+SpriBuf[SPRIBUF_FST_AVER]/100%10;
 271   2      //                              sen_buff[1]=0x30+SpriBuf[SPRIBUF_FST_AVER]/10%10;
 272   2      //                              sen_buff[2]=0x30+SpriBuf[SPRIBUF_FST_AVER]%10;
 273   2      //                              sen_buff[3]=0x30+SpriBuf[SPRIBUF_FST_MIN]/100%10;
 274   2      //                              sen_buff[4]=0x30+SpriBuf[SPRIBUF_FST_MIN]/10%10;
 275   2      //                              sen_buff[5]=0x30+SpriBuf[SPRIBUF_FST_MIN]%10;
 276   2      //                              sen_buff[6]=0x30+SpriBuf[SPRIBUF_END_AVER]/100%10;
 277   2      //                              sen_buff[7]=0x30+SpriBuf[SPRIBUF_END_AVER]/10%10;
 278   2      //                              sen_buff[8]=0x30+SpriBuf[SPRIBUF_END_AVER]%10;
 279   2      //                              sen_buff[9]=0x30+SpriBuf[SPRIBUF_END_MAX]/100%10;
 280   2      //                              sen_buff[10]=0x30+SpriBuf[SPRIBUF_END_MAX]/10%10;
 281   2      //                              sen_buff[11]=0x30+SpriBuf[SPRIBUF_END_MAX]%10;
 282   2      
 283   2      //                              sen_buff[0]=0x30+SpriBuf[0]/100%10;
 284   2      //                              sen_buff[1]=0x30+SpriBuf[0]/10%10;
 285   2      //                              sen_buff[2]=0x30+SpriBuf[0]%10;
 286   2      //                              sen_buff[3]=0x30+SpriBuf[1]/100%10;
 287   2      //                              sen_buff[4]=0x30+SpriBuf[1]/10%10;
 288   2      //                              sen_buff[5]=0x30+SpriBuf[1]%10;
 289   2      //                              sen_buff[6]=0x30+SpriBuf[2]/100%10;
 290   2      //                              sen_buff[7]=0x30+SpriBuf[2]/10%10;
 291   2      //                              sen_buff[8]=0x30+SpriBuf[2]%10;
 292   2      //                              sen_buff[9]=0x30+SpriBuf[3]/100%10;
 293   2      //                              sen_buff[10]=0x30+SpriBuf[3]/10%10;
 294   2      //                              sen_buff[11]=0x30+SpriBuf[3]%10;
 295   2      //                              sen_buff[12]=0x30+SpriBuf[4]/100%10;
 296   2      //                              sen_buff[13]=0x30+SpriBuf[4]/10%10;
 297   2      //                              sen_buff[14]=0x30+SpriBuf[4]%10;
 298   2      //                              sen_buff[15]=0x30+SpriBuf[5]/100%10;
 299   2      //                              sen_buff[16]=0x30+SpriBuf[5]/10%10;
 300   2      //                              sen_buff[17]=0x30+SpriBuf[5]%10;
 301   2      
C51 COMPILER V9.01   USART                                                                 03/01/2019 15:37:16 PAGE 6   

 302   2      //                              sen_buff[0]=0x30+SpriBuf[6]/100%10;
 303   2      //                              sen_buff[1]=0x30+SpriBuf[6]/10%10;
 304   2      //                              sen_buff[2]=0x30+SpriBuf[6]%10;
 305   2      //                              sen_buff[3]=0x30+SpriBuf[7]/100%10;
 306   2      //                              sen_buff[4]=0x30+SpriBuf[7]/10%10;
 307   2      //                              sen_buff[5]=0x30+SpriBuf[7]%10;
 308   2      //                              sen_buff[6]=0x30+SpriBuf[8]/100%10;
 309   2      //                              sen_buff[7]=0x30+SpriBuf[8]/10%10;
 310   2      //                              sen_buff[8]=0x30+SpriBuf[8]%10;
 311   2      //                              sen_buff[9]=0x30+SpriBuf[9]/100%10;
 312   2      //                              sen_buff[10]=0x30+SpriBuf[9]/10%10;
 313   2      //                              sen_buff[11]=0x30+SpriBuf[9]%10;
 314   2      //                              sen_buff[12]=0x30+SpriBuf[10]/100%10;
 315   2      //                              sen_buff[13]=0x30+SpriBuf[10]/10%10;
 316   2      //                              sen_buff[14]=0x30+SpriBuf[10]%10;
 317   2      //                              sen_buff[15]=0x30+SpriBuf[11]/100%10;
 318   2      //                              sen_buff[16]=0x30+SpriBuf[11]/10%10;
 319   2      //                              sen_buff[17]=0x30+SpriBuf[11]%10;
 320   2      //                              sen_buff[18]=0x3b;
 321   2      //                              sen_buff[19]=0x0a;
 322   2      
 323   2      
 324   2      //                              sen_buff[0]=0x30+StmNumBuf[0]/100%10;
 325   2      //                              sen_buff[1]=0x30+StmNumBuf[0]/10%10;
 326   2      //                              sen_buff[2]=0x30+StmNumBuf[0]%10;
 327   2      //                              sen_buff[3]=0x30+StmNumBuf[5]/100%10;
 328   2      //                              sen_buff[4]=0x30+StmNumBuf[5]/10%10;
 329   2      //                              sen_buff[5]=0x30+StmNumBuf[5]%10;
 330   2      //                              sen_buff[6]=0x30+StmNumBuf[9]/100%10;
 331   2      //                              sen_buff[7]=0x30+StmNumBuf[9]/10%10;
 332   2      //                              sen_buff[8]=0x30+StmNumBuf[9]%10;
 333   2      //                              sen_buff[9]=0x30+StmNumBuf[STMBUF_DATA]/100%10;
 334   2      //                              sen_buff[10]=0x30+StmNumBuf[STMBUF_DATA]/10%10;
 335   2      //                              sen_buff[11]=0x30+StmNumBuf[STMBUF_DATA]%10;
 336   2      
 337   2      
 338   2      //                              sen_buff[12]=0x3b;
 339   2      //                              sen_buff[13]=0x0a;
 340   2      
 341   2      //                              sen_buff[0]=0x30+StmNumBuf2[0]/100%10;
 342   2      //                              sen_buff[1]=0x30+StmNumBuf2[0]/10%10;
 343   2      //                              sen_buff[2]=0x30+StmNumBuf2[0]%10;
 344   2      //                              sen_buff[3]=0x30+StmNumBuf2[1]/100%10;
 345   2      //                              sen_buff[4]=0x30+StmNumBuf2[1]/10%10;
 346   2      //                              sen_buff[5]=0x30+StmNumBuf2[1]%10;
 347   2      //                              sen_buff[6]=0x30+StmNumBuf2[2]/100%10;
 348   2      //                              sen_buff[7]=0x30+StmNumBuf2[2]/10%10;
 349   2      //                              sen_buff[8]=0x30+StmNumBuf2[2]%10;
 350   2      //                              sen_buff[9]=0x3b;
 351   2      //                              sen_buff[10]=0x0a;
 352   2      
 353   2                                      break;
 354   2                      
 355   2                      }
 356   1              
 357   1              PrintString(sen_buff);  //SUART1发送一个字符串
 358   1      }
 359          
 360          
 361          /**************************************************************/
 362          /**************************************************************/
 363          /**************************************************************/
C51 COMPILER V9.01   USART                                                                 03/01/2019 15:37:16 PAGE 7   

 364          void uart_aly()
 365          {
 366   1      //      u8 xdata buf[COM_RX1_Lenth];
 367   1      
 368   1              if(!COM1.RX_TimeOut)    //超时计数
 369   1                      {
 370   2                              if(COM1.RX_Cnt>0)
 371   2                                      {
 372   3                                              COM1.RX_busy = 1;
 373   3      //                                                      memcpy(&buf,&RX1_Buffer,sizeof(RX1_Buffer));
 374   3                                              if(RX1_Buffer[0]== RX1_Buffer[1] && RX1_Buffer[0]== RX1_Buffer[2]) ViceRal= RX1_Buffer[0];
 375   3                                              memset(RX1_Buffer,0x00,sizeof(RX1_Buffer));
 376   3                                              COM1.RX_Cnt = 0;
 377   3                                              COM1.RX_busy = 0;
 378   3                                              COM1.B_RX_OK = 1;
 379   3                                      }
 380   2                       }
 381   1              if(COM1.B_RX_OK)
 382   1                      {
 383   2      //                      if(buf[0]== buf[1] && buf[0]== buf[2]) ViceRal= buf[0];
 384   2                              COM1.B_RX_OK= 0;
 385   2                      }
 386   1      }
 387          
 388          
 389          
 390          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    829    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     48      20
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
