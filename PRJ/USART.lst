C51 COMPILER V9.00   USART                                                                 03/14/2019 19:14:17 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE USART
OBJECT MODULE PLACED IN ..\HEX\USART.obj
COMPILER INVOKED BY: c:\Keil\C51\BIN\C51.EXE ..\SCR\USART.C BROWSE INCDIR(..\INC) DEBUG OBJECTEXTEND PRINT(.\USART.lst) 
                    -TABS(2) OBJECT(..\HEX\USART.obj)

line level    source

   1          
   2          #include "USART.h"
   3          
   4          
   5          
   6          COMx_Define COM1;
   7          u8  xdata TX1_Buffer[COM_TX1_Lenth];  //发送缓冲
   8          u8  xdata RX1_Buffer[COM_RX1_Lenth];  //接收缓冲
   9          
  10          
  11          
  12          
  13          /********************* UART1中断函数************************/
  14          void UART1_int (void) interrupt 4
  15          {
  16   1        if(RI)
  17   1        {
  18   2          RI = 0;
  19   2          if(!COM1.RX_busy)
  20   2            {
  21   3              if(COM1.RX_Cnt >= COM_RX1_Lenth)  
  22   3                { 
  23   4                  COM1.RX_Cnt = 0; 
  24   4                  memset(RX1_Buffer,0x00,sizeof(RX1_Buffer));
  25   4                  return;
  26   4                }
  27   3              RX1_Buffer[COM1.RX_Cnt] = SBUF;
  28   3              COM1.RX_Cnt++;
  29   3              COM1.RX_TimeOut = TimeOutSet1;  
  30   3            }
  31   2        }
  32   1      
  33   1        if(TI)
  34   1        {
  35   2          TI = 0;
  36   2          DE= COM_SEND;
  37   2          if(COM1.TX_read != COM1.TX_write)
  38   2          {
  39   3            SBUF = TX1_Buffer[COM1.TX_read];
  40   3            if(++COM1.TX_read >= COM_TX1_Lenth)   COM1.TX_read = 0;
  41   3          }
  42   2          else  
  43   2          { COM1.B_TX_busy = 0; COM1.TX_read = 0; COM1.TX_write=0; DE= COM_RECE; memset(TX1_Buffer,0,sizeof(TX1_Bu
             -ffer));}
  44   2        }
  45   1      }
  46          
  47          
  48          /*************** 装载串口发送缓冲 *******************************/
  49          
  50          void TX1_writebuff(u8 dat)  //写入发送缓冲，指针+1
  51          {
  52   1        TX1_Buffer[COM1.TX_write] = dat;  //装发送缓冲
  53   1        if(++COM1.TX_write >= COM_TX1_Lenth)  COM1.TX_write = 0;
C51 COMPILER V9.00   USART                                                                 03/14/2019 19:14:17 PAGE 2   

  54   1        if(COM1.B_TX_busy == 0)   //空闲
  55   1        {
  56   2          COM1.B_TX_busy = 1;   //标志忙
  57   2          TI = 1;         //触发发送中断
  58   2        }
  59   1      }
  60          
  61          
  62          void PrintString(u8 *puts)
  63          {
  64   1        #if ISDEBUG
  65   1      
  66   1        while (*puts != '\0') 
  67   1        {
  68   2          TX1_writebuff(*puts++);
  69   2          }
  70   1      
  71   1        //TX1_writebuff(0x0d);
  72   1          
  73   1        #endif
  74   1      }
  75          
  76          
  77          void intUsart()
  78          {
  79   1        memset(&COM1, 0, sizeof(COM1));
  80   1        memset(&TX1_Buffer, 0, sizeof(TX1_Buffer));
  81   1        memset(&RX1_Buffer, 0, sizeof(RX1_Buffer));
  82   1        DE= COM_RECE;
  83   1      }
  84          
  85          
  86          void Uart_Print(u8 speakTask,u8 num)
  87          {
  88   1      #if ISDEBUG
  89   1        u8 xdata sen_buff[COM_TX1_Lenth];
  90   1        u8 i = 0;
  91   1        memset(sen_buff,0,sizeof(sen_buff));
  92   1        
  93   1        switch(speakTask)
  94   1        {
  95   2          case 1:
  96   2                  sen_buff[0]=num;
  97   2                  sen_buff[1]=0x30+gRepairMotor.CurrentCounts/10000%10;
  98   2            sen_buff[2]=0x30+gRepairMotor.CurrentCounts/1000%10;
  99   2            sen_buff[3]=0x30+gRepairMotor.CurrentCounts/100%10;
 100   2            sen_buff[4]=0x30+gRepairMotor.CurrentCounts/10%10;
 101   2            sen_buff[5]=0x30+gRepairMotor.CurrentCounts%10;
 102   2            sen_buff[6]=num+2;
 103   2            break;
 104   2          case 3:
 105   2            sen_buff[0]=num + 63;
 106   2            sen_buff[1]=0x30+SpeRinN/100%10;
 107   2            sen_buff[2]=0x30+SpeRinN/10%10;
 108   2            sen_buff[3]=0x30+SpeRinN%10;
 109   2            sen_buff[4]=0x2c;
 110   2          
 111   2            sen_buff[5]=0x30+gRepairMotor.CurrentCounts/10000%10;
 112   2            sen_buff[6]=0x30+gRepairMotor.CurrentCounts/1000%10;
 113   2            sen_buff[7]=0x30+gRepairMotor.CurrentCounts/100%10;
 114   2            sen_buff[8]=0x30+gRepairMotor.CurrentCounts/10%10;
 115   2            sen_buff[9]=0x30+gRepairMotor.CurrentCounts%10;
C51 COMPILER V9.00   USART                                                                 03/14/2019 19:14:17 PAGE 3   

 116   2            sen_buff[10]=0x2c;
 117   2                  
 118   2                  sen_buff[11]=0x30+gCurrentSpringNum%10;
 119   2            sen_buff[12]=0x3B;
 120   2            break;
 121   2          
 122   2      //      sen_buff[5]=0x30+gRepairMotor.LastSpeRin/100%10;
 123   2      //      sen_buff[6]=0x30+gRepairMotor.LastSpeRin/10%10;
 124   2      //      sen_buff[7]=0x30+gRepairMotor.LastSpeRin%10;
 125   2      //      sen_buff[8]=0x2c;
 126   2      //    
 127   2      //      sen_buff[9]=0x30+gRepairMotor.FlagValue/100%10;
 128   2      //      sen_buff[10]=0x30+gRepairMotor.FlagValue/10%10;
 129   2      //      sen_buff[11]=0x30+gRepairMotor.FlagValue%10;
 130   2      //      sen_buff[12]=0x2c;
 131   2      //    
 132   2      //      sen_buff[13]=0x30+gRepairMotor.CurrentCounts/100%10;
 133   2      //      sen_buff[14]=0x30+gRepairMotor.CurrentCounts/10%10;
 134   2      //      sen_buff[15]=0x30+gRepairMotor.CurrentCounts%10;
 135   2      //      sen_buff[16]=0x2c;    
 136   2      //      break;
 137   2          default:
 138   2            break;
 139   2        } 
 140   1      
 141   1      
 142   1        for(i=0;i<13;i++)
 143   1        {
 144   2          TX1_writebuff(sen_buff[i]);
 145   2        }
 146   1        
 147   1        #endif
 148   1      
 149   1      }
 150          
 151          //speakTask:操作命令
 152          //num:操作数
 153          void speak(u8 speakTask,u8 num)
 154          {
 155   1        u8 xdata sen_buff[COM_TX1_Lenth];
 156   1        memset(sen_buff,0,sizeof(sen_buff));
 157   1        switch(speakTask)
 158   1          {
 159   2            case 1:
 160   2              break;
 161   2      
 162   2      
 163   2            case VICE_STA:
 164   2              sen_buff[0]=num;
 165   2              sen_buff[1]=num;
 166   2              sen_buff[2]=num;
 167   2              break;
 168   2      
 169   2      //      case 3:
 170   2      //        sen_buff[0]=num + 63;
 171   2      //        sen_buff[1]=0x30+SpeRinN/100%10;
 172   2      //        sen_buff[2]=0x30+SpeRinN/10%10;
 173   2      //        sen_buff[3]=0x30+SpeRinN%10;
 174   2      //        sen_buff[4]=0x2c;
 175   2      
 176   2      //        sen_buff[5]=0x30+gRepairMotor.LastSpeRin/100%10;
 177   2      //        sen_buff[6]=0x30+gRepairMotor.LastSpeRin/10%10;
C51 COMPILER V9.00   USART                                                                 03/14/2019 19:14:17 PAGE 4   

 178   2      //        sen_buff[7]=0x30+gRepairMotor.LastSpeRin%10;
 179   2      //        sen_buff[8]=0x2c;
 180   2      
 181   2      //        sen_buff[9]=0x30+gRepairMotor.FlagValue/100%10;
 182   2      //        sen_buff[10]=0x30+gRepairMotor.FlagValue/10%10;
 183   2      //        sen_buff[11]=0x30+gRepairMotor.FlagValue%10;
 184   2      //        sen_buff[12]=0x2c;
 185   2      
 186   2      //        sen_buff[13]=0x30+gRepairMotor.CurrentCounts/100%10;
 187   2      //        sen_buff[14]=0x30+gRepairMotor.CurrentCounts/10%10;
 188   2      //        sen_buff[15]=0x30+gRepairMotor.CurrentCounts%10;
 189   2      //        sen_buff[16]=0x2c;
 190   2      
 191   2      //        break;
 192   2      //        
 193   2      //      case 2:
 194   2      //        sen_buff[0]=num + 39;
 195   2      //        sen_buff[1]=0x30+gRepairMotor.CurrentCounts/100%10;
 196   2      //        sen_buff[2]=0x30+gRepairMotor.CurrentCounts/10%10;
 197   2      //        sen_buff[3]=0x30+gRepairMotor.CurrentCounts%10;
 198   2      //        sen_buff[4]=0x3b;
 199   2      //        sen_buff[5]=0x0a;
 200   2              
 201   2      //        sen_buff[0]=0x30+test_dly/10000%10;
 202   2      //        sen_buff[1]=0x30+test_dly/1000%10;
 203   2      //        sen_buff[2]=0x30+test_dly/100%10;
 204   2      //        sen_buff[3]=0x30+test_dly/10%10;
 205   2      //        sen_buff[4]=0x30+test_dly%10;
 206   2      //        sen_buff[5]=0x3b;
 207   2      //        sen_buff[6]=0x0a;
 208   2      
 209   2      //        sen_buff[0]=0x30+err/100%10;
 210   2      //        sen_buff[1]=0x30+err/10%10;
 211   2      //        sen_buff[2]=0x30+err%10;
 212   2      //        sen_buff[3]=0x30+mTask/100%10;
 213   2      //        sen_buff[4]=0x30+mTask/10%10;
 214   2      //        sen_buff[5]=0x30+mTask%10;
 215   2      //        sen_buff[6]=0x3b;
 216   2      //        sen_buff[7]=0x0a;
 217   2      
 218   2      //        sen_buff[0]=0x30+mTask/10%10;
 219   2      //        sen_buff[1]=0x30+mTask%10;
 220   2      //        sen_buff[2]=0x30+iTask/10%10;
 221   2      //        sen_buff[3]=0x30+iTask%10;
 222   2      //        sen_buff[4]=0x30+Even/10%10;
 223   2      //        sen_buff[5]=0x30+Even%10;
 224   2      //        sen_buff[6]=0x30+mPosD/10%10;
 225   2      //        sen_buff[7]=0x30+mPosD%10;
 226   2      //        sen_buff[8]=0x3b;
 227   2      //        sen_buff[9]=0x0a;
 228   2              
 229   2      //        sen_buff[0]=0x30+HupSta/100%10;
 230   2      //        sen_buff[1]=0x30+HupSta/10%10;
 231   2      //        sen_buff[2]=0x30+HupSta%10;
 232   2      //        sen_buff[3]=0x30+HDwSta/100%10;
 233   2      //        sen_buff[4]=0x30+HDwSta/10%10;
 234   2      //        sen_buff[5]=0x30+HDwSta%10;
 235   2      //        sen_buff[6]=0x3b;
 236   2      //        sen_buff[7]=0x0a;
 237   2      
 238   2      //        sen_buff[0]=0x30+mRunNum/100%10;
 239   2      //        sen_buff[1]=0x30+mRunNum/10%10;
C51 COMPILER V9.00   USART                                                                 03/14/2019 19:14:17 PAGE 5   

 240   2      //        sen_buff[2]=0x30+mRunNum%10;
 241   2      //        sen_buff[3]=0x30+mRunTe/100%10;
 242   2      //        sen_buff[4]=0x30+mRunTe/10%10;
 243   2      //        sen_buff[5]=0x30+mRunTe%10;
 244   2      //        sen_buff[6]=0x3b;
 245   2      //        sen_buff[7]=0x0a;
 246   2      
 247   2      //        sen_buff[0]=0x30+FzSta/10%10;
 248   2      //        sen_buff[1]=0x30+FzSta%10;
 249   2      //        sen_buff[2]=0x30+DgSta/10%10;
 250   2      //        sen_buff[3]=0x30+DgSta%10;
 251   2      //        sen_buff[4]=0x30+PosRal/10%10;
 252   2      //        sen_buff[5]=0x30+PosRal%10;
 253   2      //        sen_buff[6]=0x3b;
 254   2      //        sen_buff[7]=0x0a;
 255   2      
 256   2      //        sen_buff[0]=0x30+mType/100%10;
 257   2      //        sen_buff[1]=0x30+mType/10%10;
 258   2      //        sen_buff[2]=0x30+mType%10;
 259   2      //        sen_buff[3]=0x30+SpeRinN/100%10;
 260   2      //        sen_buff[4]=0x30+SpeRinN/10%10;
 261   2      //        sen_buff[5]=0x30+SpeRinN%10;
 262   2      //        sen_buff[6]=0x3b;
 263   2      //        sen_buff[7]=0x0a;
 264   2      
 265   2      //        sen_buff[0]=0x30+err/100%10;
 266   2      //        sen_buff[1]=0x30+err/10%10;
 267   2      //        sen_buff[2]=0x30+err%10;
 268   2      //        sen_buff[3]=0x30+mType/100%10;
 269   2      //        sen_buff[4]=0x30+mType/10%10;
 270   2      //        sen_buff[5]=0x30+mType%10;
 271   2      //        sen_buff[6]=0x3b;
 272   2      //        sen_buff[7]=0x0a;
 273   2      
 274   2      //        sen_buff[0]=0x30+DgSta/100%10;
 275   2      //        sen_buff[1]=0x30+DgSta/10%10;
 276   2      //        sen_buff[2]=0x30+DgSta%10;
 277   2      //        sen_buff[3]=0x30+Even/100%10;
 278   2      //        sen_buff[4]=0x30+Even/10%10;
 279   2      //        sen_buff[5]=0x30+Even%10;
 280   2      //        sen_buff[6]=0x3b;
 281   2      //        sen_buff[7]=0x0a;
 282   2      
 283   2      //        sen_buff[0]=0x30+mTask/100%10;
 284   2      //        sen_buff[1]=0x30+mTask/10%10;
 285   2      //        sen_buff[2]=0x30+mTask%10;
 286   2      //        sen_buff[3]=0x30+Even/100%10;
 287   2      //        sen_buff[4]=0x30+Even/10%10;
 288   2      //        sen_buff[5]=0x30+Even%10;
 289   2      //        sen_buff[6]=0x30+iTask/100%10;
 290   2      //        sen_buff[7]=0x30+iTask/10%10;
 291   2      //        sen_buff[8]=0x30+iTask%10;
 292   2      //        sen_buff[9]=0x30+iTask2/10%10;
 293   2      //        sen_buff[10]=0x30+iTask2%10;
 294   2      //        sen_buff[11]=0x30+mPosD/10%10;
 295   2      //        sen_buff[12]=0x30+mPosD%10;
 296   2      //        sen_buff[13]=0x3b;
 297   2      //        sen_buff[14]=0x0a;
 298   2      
 299   2      //        sen_buff[0]=0x30+mType/100%10;
 300   2      //        sen_buff[1]=0x30+mType/10%10;
 301   2      //        sen_buff[2]=0x30+mType%10;
C51 COMPILER V9.00   USART                                                                 03/14/2019 19:14:17 PAGE 6   

 302   2      //        sen_buff[3]=0x30+mRunTe/100%10;
 303   2      //        sen_buff[4]=0x30+mRunTe/10%10;
 304   2      //        sen_buff[5]=0x30+mRunTe%10;
 305   2      //        sen_buff[6]=0x30+StmSp/100%10;
 306   2      //        sen_buff[7]=0x30+StmSp/10%10;
 307   2      //        sen_buff[8]=0x30+StmSp%10;
 308   2      //        sen_buff[9]=0x30+DwSlo/100%10;
 309   2      //        sen_buff[10]=0x30+DwSlo/10%10;
 310   2      //        sen_buff[11]=0x30+DwSlo%10;
 311   2      //        sen_buff[12]=0x30+DwSloBri/100%10;
 312   2      //        sen_buff[13]=0x30+DwSloBri/10%10;
 313   2      //        sen_buff[14]=0x30+DwSloBri%10;
 314   2      //        sen_buff[15]=0x3b;
 315   2      //        sen_buff[16]=0x0a;
 316   2      
 317   2      //        sen_buff[0]=0x30+aLine%10;
 318   2      //        sen_buff[1]=0x30+hafTest/10%10;
 319   2      //        sen_buff[2]=0x30+hafTest%10;
 320   2      //        sen_buff[3]=0x30+AtNum/100%10;
 321   2      //        sen_buff[4]=0x30+AtNum/10%10;
 322   2      //        sen_buff[5]=0x30+AtNum%10;
 323   2      //        sen_buff[6]=0x30+iTask/100%10;
 324   2      //        sen_buff[7]=0x30+iTask/10%10;
 325   2      //        sen_buff[8]=0x30+iTask%10;
 326   2      //        sen_buff[9]=0x3b;
 327   2      //        sen_buff[10]=0x0a;
 328   2      
 329   2      //        sen_buff[0]=0x30+StmNum2/100%10;
 330   2      //        sen_buff[1]=0x30+StmNum2/10%10;
 331   2      //        sen_buff[2]=0x30+StmNum2%10;
 332   2      //        sen_buff[3]=0x3b;
 333   2      //        sen_buff[4]=0x0a;
 334   2      
 335   2      //        sen_buff[0]=0x30+ViceRal/10%10;
 336   2      //        sen_buff[1]=0x30+ViceRal%10;
 337   2      //        sen_buff[2]=0x3b;
 338   2      //        sen_buff[3]=0x0a;
 339   2      
 340   2      
 341   2      //        sen_buff[0]=0x30+StmSp/100%10;
 342   2      //        sen_buff[1]=0x30+StmSp/10%10;
 343   2      //        sen_buff[2]=0x30+StmSp%10;
 344   2      //        sen_buff[3]=0x30+StmSp2/100%10;
 345   2      //        sen_buff[4]=0x30+StmSp2/10%10;
 346   2      //        sen_buff[5]=0x30+StmSp2%10;
 347   2      //        sen_buff[6]=0x30+StmSlow/100%10;
 348   2      //        sen_buff[7]=0x30+StmSlow/10%10;
 349   2      //        sen_buff[8]=0x30+StmSlow%10;
 350   2      //        sen_buff[9]=0x30+StmSlow2/100%10;
 351   2      //        sen_buff[10]=0x30+StmSlow2/10%10;
 352   2      //        sen_buff[11]=0x30+StmSlow2%10;
 353   2      //        sen_buff[12]=0x3b;
 354   2      //        sen_buff[13]=0x0a;
 355   2      
 356   2      //        sen_buff[0]=0x30+StmSp/1000%10;
 357   2      //        sen_buff[1]=0x30+StmSp/100%10;
 358   2      //        sen_buff[2]=0x30+StmSp/10%10;
 359   2      //        sen_buff[3]=0x30+StmSp%10;
 360   2      //        sen_buff[4]=0x30+StmSlow/1000%10;
 361   2      //        sen_buff[5]=0x30+StmSlow/100%10;
 362   2      //        sen_buff[6]=0x30+StmSlow/10%10;
 363   2      //        sen_buff[7]=0x30+StmSlow%10;
C51 COMPILER V9.00   USART                                                                 03/14/2019 19:14:17 PAGE 7   

 364   2      //        sen_buff[8]=0x3b;
 365   2      //        sen_buff[9]=0x0a;
 366   2      
 367   2      
 368   2      //        sen_buff[0]=0x30+SpriBuf[SPRIBUF_FST_AVER]/100%10;
 369   2      //        sen_buff[1]=0x30+SpriBuf[SPRIBUF_FST_AVER]/10%10;
 370   2      //        sen_buff[2]=0x30+SpriBuf[SPRIBUF_FST_AVER]%10;
 371   2      //        sen_buff[3]=0x30+SpriBuf[SPRIBUF_FST_MIN]/100%10;
 372   2      //        sen_buff[4]=0x30+SpriBuf[SPRIBUF_FST_MIN]/10%10;
 373   2      //        sen_buff[5]=0x30+SpriBuf[SPRIBUF_FST_MIN]%10;
 374   2      //        sen_buff[6]=0x30+SpriBuf[SPRIBUF_END_AVER]/100%10;
 375   2      //        sen_buff[7]=0x30+SpriBuf[SPRIBUF_END_AVER]/10%10;
 376   2      //        sen_buff[8]=0x30+SpriBuf[SPRIBUF_END_AVER]%10;
 377   2      //        sen_buff[9]=0x30+SpriBuf[SPRIBUF_END_MAX]/100%10;
 378   2      //        sen_buff[10]=0x30+SpriBuf[SPRIBUF_END_MAX]/10%10;
 379   2      //        sen_buff[11]=0x30+SpriBuf[SPRIBUF_END_MAX]%10;
 380   2      
 381   2      //        sen_buff[0]=0x30+SpriBuf[0]/100%10;
 382   2      //        sen_buff[1]=0x30+SpriBuf[0]/10%10;
 383   2      //        sen_buff[2]=0x30+SpriBuf[0]%10;
 384   2      //        sen_buff[3]=0x30+SpriBuf[1]/100%10;
 385   2      //        sen_buff[4]=0x30+SpriBuf[1]/10%10;
 386   2      //        sen_buff[5]=0x30+SpriBuf[1]%10;
 387   2      //        sen_buff[6]=0x30+SpriBuf[2]/100%10;
 388   2      //        sen_buff[7]=0x30+SpriBuf[2]/10%10;
 389   2      //        sen_buff[8]=0x30+SpriBuf[2]%10;
 390   2      //        sen_buff[9]=0x30+SpriBuf[3]/100%10;
 391   2      //        sen_buff[10]=0x30+SpriBuf[3]/10%10;
 392   2      //        sen_buff[11]=0x30+SpriBuf[3]%10;
 393   2      //        sen_buff[12]=0x30+SpriBuf[4]/100%10;
 394   2      //        sen_buff[13]=0x30+SpriBuf[4]/10%10;
 395   2      //        sen_buff[14]=0x30+SpriBuf[4]%10;
 396   2      //        sen_buff[15]=0x30+SpriBuf[5]/100%10;
 397   2      //        sen_buff[16]=0x30+SpriBuf[5]/10%10;
 398   2      //        sen_buff[17]=0x30+SpriBuf[5]%10;
 399   2      
 400   2      //        sen_buff[0]=0x30+SpriBuf[6]/100%10;
 401   2      //        sen_buff[1]=0x30+SpriBuf[6]/10%10;
 402   2      //        sen_buff[2]=0x30+SpriBuf[6]%10;
 403   2      //        sen_buff[3]=0x30+SpriBuf[7]/100%10;
 404   2      //        sen_buff[4]=0x30+SpriBuf[7]/10%10;
 405   2      //        sen_buff[5]=0x30+SpriBuf[7]%10;
 406   2      //        sen_buff[6]=0x30+SpriBuf[8]/100%10;
 407   2      //        sen_buff[7]=0x30+SpriBuf[8]/10%10;
 408   2      //        sen_buff[8]=0x30+SpriBuf[8]%10;
 409   2      //        sen_buff[9]=0x30+SpriBuf[9]/100%10;
 410   2      //        sen_buff[10]=0x30+SpriBuf[9]/10%10;
 411   2      //        sen_buff[11]=0x30+SpriBuf[9]%10;
 412   2      //        sen_buff[12]=0x30+SpriBuf[10]/100%10;
 413   2      //        sen_buff[13]=0x30+SpriBuf[10]/10%10;
 414   2      //        sen_buff[14]=0x30+SpriBuf[10]%10;
 415   2      //        sen_buff[15]=0x30+SpriBuf[11]/100%10;
 416   2      //        sen_buff[16]=0x30+SpriBuf[11]/10%10;
 417   2      //        sen_buff[17]=0x30+SpriBuf[11]%10;
 418   2      //        sen_buff[18]=0x3b;
 419   2      //        sen_buff[19]=0x0a;
 420   2      
 421   2      
 422   2      //        sen_buff[0]=0x30+StmNumBuf[0]/100%10;
 423   2      //        sen_buff[1]=0x30+StmNumBuf[0]/10%10;
 424   2      //        sen_buff[2]=0x30+StmNumBuf[0]%10;
 425   2      //        sen_buff[3]=0x30+StmNumBuf[5]/100%10;
C51 COMPILER V9.00   USART                                                                 03/14/2019 19:14:17 PAGE 8   

 426   2      //        sen_buff[4]=0x30+StmNumBuf[5]/10%10;
 427   2      //        sen_buff[5]=0x30+StmNumBuf[5]%10;
 428   2      //        sen_buff[6]=0x30+StmNumBuf[9]/100%10;
 429   2      //        sen_buff[7]=0x30+StmNumBuf[9]/10%10;
 430   2      //        sen_buff[8]=0x30+StmNumBuf[9]%10;
 431   2      //        sen_buff[9]=0x30+StmNumBuf[STMBUF_DATA]/100%10;
 432   2      //        sen_buff[10]=0x30+StmNumBuf[STMBUF_DATA]/10%10;
 433   2      //        sen_buff[11]=0x30+StmNumBuf[STMBUF_DATA]%10;
 434   2      
 435   2      
 436   2      //        sen_buff[12]=0x3b;
 437   2      //        sen_buff[13]=0x0a;
 438   2      
 439   2      //        sen_buff[0]=0x30+StmNumBuf2[0]/100%10;
 440   2      //        sen_buff[1]=0x30+StmNumBuf2[0]/10%10;
 441   2      //        sen_buff[2]=0x30+StmNumBuf2[0]%10;
 442   2      //        sen_buff[3]=0x30+StmNumBuf2[1]/100%10;
 443   2      //        sen_buff[4]=0x30+StmNumBuf2[1]/10%10;
 444   2      //        sen_buff[5]=0x30+StmNumBuf2[1]%10;
 445   2      //        sen_buff[6]=0x30+StmNumBuf2[2]/100%10;
 446   2      //        sen_buff[7]=0x30+StmNumBuf2[2]/10%10;
 447   2      //        sen_buff[8]=0x30+StmNumBuf2[2]%10;
 448   2      //        sen_buff[9]=0x3b;
 449   2      //        sen_buff[10]=0x0a;
 450   2      
 451   2              break;
 452   2          
 453   2          }
 454   1        
 455   1        PrintString(sen_buff);  //SUART1发送一个字符串
 456   1      }
 457          
 458          
 459          /**************************************************************/
 460          /**************************************************************/
 461          /**************************************************************/
 462          void uart_aly()
 463          {
 464   1      //  u8 xdata buf[COM_RX1_Lenth];
 465   1      
 466   1        if(!COM1.RX_TimeOut)  //超时计数
 467   1          {
 468   2            if(COM1.RX_Cnt>0)
 469   2              {
 470   3                COM1.RX_busy = 1;
 471   3      //              memcpy(&buf,&RX1_Buffer,sizeof(RX1_Buffer));
 472   3                if(RX1_Buffer[0]== RX1_Buffer[1] && RX1_Buffer[0]== RX1_Buffer[2]) ViceRal= RX1_Buffer[0];
 473   3                memset(RX1_Buffer,0x00,sizeof(RX1_Buffer));
 474   3                COM1.RX_Cnt = 0;
 475   3                COM1.RX_busy = 0;
 476   3                COM1.B_RX_OK = 1;
 477   3              }
 478   2           }
 479   1        if(COM1.B_RX_OK)
 480   1          {
 481   2      //      if(buf[0]== buf[1] && buf[0]== buf[2]) ViceRal= buf[0];
 482   2            COM1.B_RX_OK= 0;
 483   2          }
 484   1      }
 485          
 486          
 487          
C51 COMPILER V9.00   USART                                                                 03/14/2019 19:14:17 PAGE 9   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    840    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     48      40
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
